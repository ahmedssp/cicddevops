pipeline {
    agent any
    environment {
        // Use exact paths as per your system
        JAVA_HOME = 'C:\\Program Files\\Java\\jdk-17'
        MAVEN_HOME = 'C:\\Program Files\\Java\\apache-maven-3.9.9'

        // Jenkins tool names (override these in Jenkins if using Jenkins tools)
        // JAVA_HOME = tool 'JDK17'
        // MAVEN_HOME = tool 'Maven_3.9.9'

        DOCKER_REGISTRY = 'mycompany.jfrog.io/myapp'
        DOCKER_CREDENTIALS = credentials('docker-registry-credentials')
        SONARQUBE_SERVER = 'sonarqube' // Must match Jenkins Sonar server config
        STAGING_SERVER = 'staging@my-staging-server.com'
        PRODUCTION_SERVER = 'prod@my-prod-server.com'
    }
    triggers {
        pollSCM('H/5 * * * *')
    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
            }
        }
        stage('Build') {
            steps {
                sh "\"${MAVEN_HOME}\\bin\\mvn\" clean package -DskipTests"
            }
        }
        stage('Unit Tests') {
            steps {
                sh "\"${MAVEN_HOME}\\bin\\mvn\" test"
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Static Analysis') {
            steps {
                withSonarQubeEnv("${SONARQUBE_SERVER}") {
                    // If using SonarScanner CLI (as per your system)
                    sh 'sonar-scanner'
                    // OR if you still use Maven plugin
                    // sh "\"${MAVEN_HOME}\\bin\\mvn\" sonar:sonar"
                }
            }
        }
        stage('Integration Tests') {
            steps {
                sh "\"${MAVEN_HOME}\\bin\\mvn\" verify -Pintegration-test"
            }
            post {
                always {
                    junit '**/target/failsafe-reports/*.xml'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                sh "docker build -t ${DOCKER_REGISTRY}:latest ."
                sh "docker tag ${DOCKER_REGISTRY}:latest ${DOCKER_REGISTRY}:${env.BUILD_NUMBER}"
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-registry-credentials', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin mycompany.jfrog.io"
                    sh "docker push ${DOCKER_REGISTRY}:latest"
                    sh "docker push ${DOCKER_REGISTRY}:${env.BUILD_NUMBER}"
                }
            }
        }
        stage('Deploy to Staging') {
            steps {
                sshagent(['staging-server-credentials']) {
                    sh """
                        ssh ${STAGING_SERVER} "docker pull ${DOCKER_REGISTRY}:latest && \
                        docker stop myapp || true && \
                        docker rm myapp || true && \
                        docker run -d --name myapp -p 8080:8080 ${DOCKER_REGISTRY}:latest"
                    """
                }
            }
        }
        stage('End-to-End Tests') {
            steps {
                sh "\"${MAVEN_HOME}\\bin\\mvn\" test -Pe2e-test"
            }
            post {
                always {
                    junit '**/target/e2e-reports/*.xml'
                }
            }
        }
        stage('Deploy to Production') {
            when {
                branch 'main'
            }
            steps {
                input message: 'Approve deployment to production?', ok: 'Deploy'
                sshagent(['prod-server-credentials']) {
                    sh """
                        ssh ${PRODUCTION_SERVER} "docker pull ${DOCKER_REGISTRY}:latest && \
                        docker stop myapp || true && \
                        docker rm myapp || true && \
                        docker run -d --name myapp -p 8080:8080 ${DOCKER_REGISTRY}:latest"
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
        success {
            mail to: 'dev-team@mycompany.com',
                 subject: "Build ${env.BUILD_NUMBER} Succeeded",
                 body: "The CI/CD pipeline for ${env.JOB_NAME} build ${env.BUILD_NUMBER} completed successfully."
        }
        failure {
            mail to: 'dev-team@mycompany.com',
                 subject: "Build ${env.BUILD_NUMBER} Failed",
                 body: "The CI/CD pipeline for ${env.JOB_NAME} build ${env.BUILD_NUMBER} failed. Check Jenkins for details."
        }
    }
}
